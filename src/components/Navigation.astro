---
import PrimaryButtonIcon from './PrimaryButtonIcon.astro'

import NavItem from './NavItem.astro'
import NavItemBacklink from './NavItemBacklink.astro'
import NavItemLink from './NavItemLink.astro'
import NavBreadCrumb from './NavBreadCrumb.astro'
import LanguageSubmenu from './LanguageSubmenu.astro'
import SubmenuWrapper from './SubmenuWrapper.astro'
import SecondLevelMenu from './SecondLevelMenu.astro'
import ThirdLevelMenu from './ThirdLevelMenu.astro'
import ThirdLevelNavItem from './ThirdLevelNavItem.astro'
import FourthLevelMenu from './FourthLevelMenu.astro'
import SecondLevelMenuWrapper from './SecondLevelMenuWrapper.astro'
import PrimaryButtonOnlyIcon from './PrimaryButtonOnlyIcon.astro'
import FirstLevelNavItem from './FirstLevelNavItem.astro'
import SecondLevelNavItem from './SecondLevelNavItem.astro'
// @ts-ignore
import navigationData from '../data/navigationData.json'
import OverviewLink from './OverviewLink.astro'
import FourthLevelBackButton from './FourthLevelBackButton.astro'
import SecondLevelNavItemLink from './SecondLevelNavItemLink.astro'
import LanguageSubmenuWrapper from './LanguageSubmenuWrapper.astro'
import LanguageItem from './LanguageItem.astro'
---

<nav class='border-fernaoGreen 1440:w-full' id='nav'>
  {/* First Level */}
  <ul
    class='z-[1] mx-auto hidden h-screen w-full max-w-[394px] bg-fernaoBGWhite px-9 pt-8 1440:top-0 1440:mx-0 1440:flex 1440:h-auto 1440:max-w-none 1440:items-center 1440:p-0'
    id='firstlevel-menu'
  >
    {
      navigationData.items.map((item) => {
        return (
          <FirstLevelNavItem
            ariaControls={`secondlevel-${item.id}`}
            id='firstlevel-button'
            title={item.title}
          >
            {/*### Second Level */}
            <SecondLevelMenu id={`secondlevel-${item.id}`}>
              <NavItemBacklink
                ariaControls={`secondlevel-${item.id}`}
                title={item.title}
                id='firstlevel-button'
              />
              <SecondLevelMenuWrapper>
                {item.items?.map((item) => {
                  const hasThirdLevel = item.items?.length > 0

                  return hasThirdLevel ? (
                    <SecondLevelNavItem
                      ariaControls={`thirdlevel-${item.id}`}
                      id='secondlevel-button'
                      title={item.title}
                      bold={false}
                    >
                      {/* Third Level */}
                      <ThirdLevelMenu id={`thirdlevel-${item.id}`}>
                        <NavBreadCrumb title={`${item.parentTitle} > `} />
                        <NavItemBacklink
                          ariaControls={`thirdlevel-${item.id}`}
                          title={item.title}
                          id='secondlevel-button'
                        />
                        <SubmenuWrapper>
                          {item.items?.map((item) => {
                            const hasFourthLevel = item.items?.length > 0

                            return hasFourthLevel ? (
                              <ThirdLevelNavItem
                                ariaControls={`fourthlevel-${item.id}`}
                                id='thirdlevel-button'
                                title={item.title}
                                bold={false}
                                text={item.text}
                              >
                                {/* Fourth Level */}
                                <FourthLevelMenu id={`fourthlevel-${item.id}`}>
                                  <NavBreadCrumb
                                    title={`${item.parentTitle} > `}
                                  />
                                  <FourthLevelBackButton
                                    ariaControls={`fourthlevel-${item.id}`}
                                    title={item.title}
                                    id='thirdlevel-button'
                                    parentTitle={item.parentTitle}
                                  />
                                  <SubmenuWrapper>
                                    {item.items?.map((item) => {
                                      return (
                                        <NavItemLink
                                          href={item.href}
                                          title={item.title}
                                          text={item.text}
                                        />
                                      )
                                    })}

                                    <OverviewLink href={item.href}>
                                      {item.title}
                                    </OverviewLink>
                                  </SubmenuWrapper>
                                </FourthLevelMenu>
                              </ThirdLevelNavItem>
                            ) : (
                              <NavItemLink
                                href={item.href}
                                title={item.title}
                                text={item.text}
                              />
                            )
                          })}

                          <OverviewLink href={item.href}>
                            {item.title}
                          </OverviewLink>
                        </SubmenuWrapper>
                      </ThirdLevelMenu>
                    </SecondLevelNavItem>
                  ) : (
                    <SecondLevelNavItemLink href={item.href} title={item.title}>
                      <ThirdLevelMenu id={`thirdlevel-${item.id}`}>
                        <NavBreadCrumb title={`${item.parentTitle} > `} />
                        <NavItemBacklink
                          ariaControls={`thirdlevel-${item.id}`}
                          title={item.title}
                          id='secondlevel-button'
                        />
                        <SubmenuWrapper>
                          <OverviewLink
                            href={item.href}
                            title={item.title}
                            text={item.text}
                          >
                            {item.title}
                          </OverviewLink>
                        </SubmenuWrapper>
                      </ThirdLevelMenu>
                    </SecondLevelNavItemLink>
                  )
                })}
              </SecondLevelMenuWrapper>
            </SecondLevelMenu>
          </FirstLevelNavItem>
        )
      })
    }
    <!-- TODO: add other nav items  -->

    <li class='mt-14 1440:hidden'>
      <PrimaryButtonIcon>Termin buchen</PrimaryButtonIcon>
    </li>

    <li class='1440:ml-auto'>
      <ul class='mt-4 1440:mt-0 1440:flex 1440:w-full 1440:items-center'>
        <NavItem
          title='Sprache'
          ariaControls='secondlevel-sprache'
          id='firstlevel-button'
          bold={false}
        >
          <LanguageSubmenu id='secondlevel-sprache'>
            <NavItemBacklink
              ariaControls='secondlevel-sprache'
              title='Sprache'
              id='secondlevel-button-back'
            />
            <LanguageSubmenuWrapper>
              <LanguageItem
                href='/solutions/it-security/next-gen-security-platforms'
                title='Deutsch'
              />
              <LanguageItem
                href='/solutions/it-security/next-gen-security-platforms'
                title='Englisch'
              />
            </LanguageSubmenuWrapper>
          </LanguageSubmenu>
        </NavItem>

        <NavItem
          title='Ãœber Uns'
          ariaControls='secondlevel-uber-uns'
          id='secondlevel-button'
          bold={false}
        />
        <li class='1440:hidden'>
          <ul>
            <NavItemLink title='Jobs' href='/jobs' />
            <NavItemLink title='Datenschutz' href='/datenschutz' lightText />
            <NavItemLink title='Impressum' href='/impressum' lightText />
            <NavItemLink
              title='Cookie Policy'
              href='/cookie-policy'
              lightText
            />
          </ul>
        </li>
      </ul>
    </li>
    <li class='hidden 1440:block'>
      <PrimaryButtonOnlyIcon />
    </li>
  </ul>
</nav>

<script>
  const handleMenuButtonClick = () => {
    document.querySelector('#firstlevel-menu').classList.toggle('hidden')
    document.querySelector('#nav').classList.toggle('border-t-2')
    document.querySelector('#menu-open-icon').classList.toggle('hidden')
    document.querySelector('#menu-closed-icon').classList.toggle('hidden')

    // if open, close all open submenus to reset menu
    resetMenus()
  }

  const handleFirstLevelClick = (id, button) => {
    const isDesktop = window.innerWidth > 1440

    if (isDesktop) {
      const isActiveFirstLevelBtnActive = button.classList.contains(
        'activeFirstLevelBtn'
      )
      const menus = document.querySelectorAll('ul[id^="secondlevel-"]')
      const buttons = document.querySelectorAll('button[id^="firstlevel-"]')
      const secondLevelButtons = button.nextElementSibling.querySelectorAll(
        'button[id^="secondlevel-"]'
      )
      const firstSecondLevelButton = secondLevelButtons[0]

      // Reset other open menus
      menus.forEach((menu) => {
        if (`#${menu.id}` !== id) {
          menu.classList.add('hidden')
          if (menu.nextElementSibling) {
            menu.nextElementSibling.classList.add('hidden')
          }
        }
      })

      // Reset other active states
      buttons.forEach((btn) => {
        if (`#${btn.id}` !== id) {
          btn.classList.remove('activeFirstLevelBtn')
        }
      })

      // Toggle active class on button
      button.classList.toggle('activeFirstLevelBtn')
      // Toggle active class on first second level button
      if (firstSecondLevelButton) {
        firstSecondLevelButton.classList.toggle('activeSecondLevelBtn')
      }

      // Toggle fixed class on header
      document.querySelector('#header').classList.toggle('fixed')

      // Side effects for clicked twice
      if (isActiveFirstLevelBtnActive) {
        button.classList.remove('activeFirstLevelBtn')

        // Reset other open menus and active states
        const thirdLevelMenu = document.querySelectorAll(
          'ul[id^="thirdlevel-"]'
        )
        const fourthLevelMenu = document.querySelectorAll(
          'ul[id^="fourthlevel-"]'
        )
        const activeSecondLevelBtn = document.querySelector(
          'button[id^="secondlevel-"].activeSecondLevelBtn'
        )
        thirdLevelMenu.forEach((menu) => {
          menu.classList.add('hidden')
        })
        fourthLevelMenu.forEach((menu) => {
          menu.classList.add('hidden')
        })
        if (activeSecondLevelBtn) {
          activeSecondLevelBtn.classList.remove('activeSecondLevelBtn')
        }
      }
    } else {
      // On mobile, toggle menu with given id
      const targetMenu = document.querySelector(id)
      targetMenu.classList.toggle('hidden')
    }
  }

  const handleSecondLevelClick = (id, button) => {
    if (window.innerWidth > 1440) {
      // Reset other open menus
      const menus = document.querySelectorAll('ul[id^="thirdlevel-"]')
      const buttons = document.querySelectorAll('.activeSecondLevelBtn')
      menus.forEach((menu) => {
        if (`#${menu.id}` !== id) {
          menu.classList.add('hidden')
          if (menu.nextElementSibling) {
            menu.nextElementSibling.classList.add('hidden')
          }
        }
      })

      // Reset other active states
      buttons.forEach((btn) => {
        if (`#${btn.id}` !== id) {
          btn.classList.remove('activeSecondLevelBtn')
        }
      })

      button.classList.toggle('activeSecondLevelBtn')
      // Toggle menu
      document.querySelector(id).classList.toggle('hidden')
    } else {
      document.querySelector(id).classList.toggle('hidden')
    }
  }

  const handleClick = (id) => {
    document.querySelector(id).classList.toggle('hidden')
  }

  const resetMenus = () => {
    const menus = document.querySelectorAll(
      'ul[id^="secondlevel-"], ul[id^="thirdlevel-"], ul[id^="fourthlevel-"]'
    )
    menus.forEach((menu) => {
      menu.classList.add('hidden')
    })
  }

  const menuButton = document.querySelector('#menu-button')
  menuButton.addEventListener('click', handleMenuButtonClick)

  const secondLevelButtons = document.querySelectorAll(
    '#secondlevel-button, #secondlevel-button-back'
  )
  secondLevelButtons.forEach((button) => {
    const id = button.getAttribute('aria-controls')
    button.addEventListener('click', () => {
      handleSecondLevelClick(`#${id}`, button)
    })
  })
  const firstlevelButtons = document.querySelectorAll('#firstlevel-button')
  firstlevelButtons.forEach((button) => {
    const id = button.getAttribute('aria-controls')
    button.addEventListener('click', () => {
      handleFirstLevelClick(`#${id}`, button)
    })
  })

  const buttons = document.querySelectorAll(
    '#thirdlevel-button, #thirdlevel-button-back, #fourthlevel-button'
  )
  buttons.forEach((button) => {
    const id = button.getAttribute('aria-controls')
    button.addEventListener('click', () => {
      handleClick(`#${id}`)
    })
  })
</script>
